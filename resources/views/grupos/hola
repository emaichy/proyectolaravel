@extends('layouts.app')

@section('content')
{{-- SweetAlert para mensajes de sesión --}}
@if (session('success'))
<script>
    Swal.fire({
        icon: 'success',
        title: '¡Éxito!',
        text: '{{ session('
        success ') }}',
        confirmButtonText: 'Aceptar'
    });
</script>
@endif
@if (session('error'))
<script>
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: '{{ session('
        error ') }}',
        confirmButtonText: 'Aceptar'
    });
</script>
@endif

<div class="container py-4">
    {{-- Parte para agregar alumnos --}}
    <div class="card shadow-sm mb-5 border-0">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0">Agregar alumnos</h5>
        </div>
        <div class="card-body">
            <label for="alumno-select" class="form-label">Selecciona alumno:</label>
            <div class="input-group mb-3">
                <select class="form-select" id="alumno-select">
                    <option value="" disabled selected>-- Selecciona un alumno --</option>
                    @foreach ($alumnosDisponibles as $alumno)
                    @if ($alumno->Matricula)
                    <option value="{{ $alumno->Matricula }}">
                        {{ $alumno->Nombre }} {{ $alumno->ApePaterno }} {{ $alumno->ApeMaterno }}
                    </option>
                    @endif
                    @endforeach
                </select>
                <button type="button" class="btn btn-primary" id="btn-agregar-alumno">Seleccionar</button>
            </div>

            <div id="lista-contenedor" style="display: none;">
                <h6>Lista preliminar de alumnos:</h6>
                <form id="form-agregar-alumnos" method="POST"
                    action="{{ route('grupos.asignar-alumnos', $grupo->ID_Grupo) }}">
                    @csrf
                    <ul class="list-group mb-3" id="lista-alumnos"></ul>
                    <button type="submit" class="btn btn-success">Agregar alumnos seleccionados</button>
                </form>
            </div>
        </div>
    </div>

    {{-- Detalle del grupo (antes incluído) --}}
    <div class="card shadow-lg mb-4 border-0">
        <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Grupo: {{ $grupo->NombreGrupo }}</h2>
        </div>
        <div class="card-body">
            <h5 class="fw-bold">Maestro a cargo:</h5>
            <p>
                @if ($grupo->maestro)
                {{ $grupo->maestro->Nombre }} {{ $grupo->maestro->ApePaterno }} {{ $grupo->maestro->ApeMaestro }}
                @else
                <em class="text-muted">No asignado</em>
                @endif
            </p>

            <h5 class="fw-bold mt-4">Alumnos del grupo:</h5>
            @if ($grupo->alumnos->count())
            <form method="POST" action="{{ route('grupos.desasignar-alumnos', $grupo->ID_Grupo) }}">
                @csrf
                @method('DELETE')
                <ul class="list-group">
                    @foreach ($grupo->alumnos as $alumno)
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <input type="checkbox" name="alumnos[]" value="{{ $alumno->Matricula }}"
                                id="alumno_{{ $alumno->Matricula }}">
                            <label for="alumno_{{ $alumno->Matricula }}">
                                {{ $alumno->Nombre }} {{ $alumno->ApePaterno }} {{ $alumno->ApeMaterno }}
                            </label>
                        </div>
                        <div>
                            <a href="{{ route('alumnos.show', $alumno->Matricula) }}"
                                class="btn btn-sm btn-outline-primary me-2">Ver</a>

                            <button type="button" class="btn btn-sm btn-outline-danger"
                                onclick="quitarAlumno('{{ $grupo->ID_Grupo }}', '{{ $alumno->Matricula }}', this)">
                                Quitar
                            </button>
                        </div>
                    </li>
                    @endforeach
                </ul>
                <button type="submit" class="btn btn-danger mt-3" id="quitar-seleccionados">
                    Quitar alumnos
                </button>
            </form>
            @else
            <p class="text-muted">Este grupo no tiene alumnos asignados.</p>
            @endif
        </div>
    </div>

    {{-- Navegación entre grupos --}}
    <div class="d-flex justify-content-center align-items-center flex-wrap gap-2 mb-4">
        <button id="btn-anterior" class="btn btn-outline-secondary btn-sm">Anterior</button>
        <div class="d-flex align-items-center gap-2 flex-wrap justify-content-center" id="grupo-nav"
            style="transition: transform 0.4s ease-in-out;"></div>
        <button id="btn-siguiente" class="btn btn-outline-secondary btn-sm">Siguiente</button>
    </div>
</div>

{{-- Aquí pones todos los scripts y estilos que estaban en ambos archivos juntos --}}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const todosLosGrupos = @json($todosLosGrupos);
        let grupoActualId = {
            {
                $grupo - > ID_Grupo
            }
        };
        const navContainer = document.getElementById('grupo-nav');
        const btnAnterior = document.getElementById('btn-anterior');
        const btnSiguiente = document.getElementById('btn-siguiente');

        function renderGrupos() {
            navContainer.innerHTML = '';
            const index = todosLosGrupos.findIndex(g => g.ID_Grupo == grupoActualId);
            const total = todosLosGrupos.length;
            btnAnterior.disabled = index === 0;
            btnSiguiente.disabled = index === total - 1;

            function createBtn(grupo, active = false) {
                const btn = document.createElement('button');
                btn.className = 'btn btn-sm ' + (active ? 'btn-primary' : 'btn-outline-primary');
                btn.textContent = grupo.NombreGrupo;
                btn.onclick = () => {
                    grupoActualId = grupo.ID_Grupo;
                    cargarGrupo(grupoActualId);
                };
                navContainer.appendChild(btn);
            }

            function createDots() {
                const btn = document.createElement('button');
                btn.textContent = '[.....]';
                btn.className = 'btn btn-outline-secondary btn-sm btn-dots';
                navContainer.appendChild(btn);
            }
            if (index <= 2) {
                for (let i = 0; i <= 2 && i < total; i++) createBtn(todosLosGrupos[i], i === index);
                if (total > 6) {
                    createDots();
                    for (let i = total - 3; i < total; i++) createBtn(todosLosGrupos[i], i === index);
                }
            } else if (index >= total - 3) {
                for (let i = 0; i < 3; i++) createBtn(todosLosGrupos[i], i === index);
                createDots();
                for (let i = total - 3; i < total; i++) createBtn(todosLosGrupos[i], i === index);
            } else {
                createBtn(todosLosGrupos[0]);
                createDots();
                createBtn(todosLosGrupos[index - 1]);
                createBtn(todosLosGrupos[index], true);
                createBtn(todosLosGrupos[index + 1]);
                createDots();
                createBtn(todosLosGrupos[total - 1]);
            }
        }

        function cargarGrupo(id) {
            fetch(`/grupos/ajax/${id}`)
                .then(res => res.json())
                .then(data => {
                    document.getElementById('grupo-detalle').innerHTML = data.html;
                    const form = document.getElementById('form-agregar-alumnos');
                    if (form) {
                        form.action = `/grupos/${id}/asignar-alumnos`;
                    }
                    history.pushState(null, '', `/grupos/${id}`);
                    renderGrupos();
                });
        }
        btnAnterior.addEventListener('click', () => {
            const idx = todosLosGrupos.findIndex(g => g.ID_Grupo == grupoActualId);
            if (idx > 0) {
                grupoActualId = todosLosGrupos[idx - 1].ID_Grupo;
                cargarGrupo(grupoActualId);
            }
        });
        btnSiguiente.addEventListener('click', () => {
            const idx = todosLosGrupos.findIndex(g => g.ID_Grupo == grupoActualId);
            if (idx < todosLosGrupos.length - 1) {
                grupoActualId = todosLosGrupos[idx + 1].ID_Grupo;
                cargarGrupo(grupoActualId);
            }
        });
        renderGrupos();
    });

    const selectAlumno = document.getElementById('alumno-select');
    const btnAgregar = document.getElementById('btn-agregar-alumno');
    const lista = document.getElementById('lista-alumnos');
    const form = document.getElementById('form-agregar-alumnos');
    let alumnosSeleccionados = [];

    function renderLista() {
        const contenedorLista = document.getElementById('lista-contenedor');
        lista.innerHTML = '';

        if (alumnosSeleccionados.length > 0) {
            contenedorLista.style.display = 'block';
        } else {
            contenedorLista.style.display = 'none';
        }

        alumnosSeleccionados.forEach((alumno, index) => {
            const item = document.createElement('li');
            item.className = 'list-group-item d-flex justify-content-between align-items-center';

            const label = document.createElement('span');
            label.textContent = alumno.nombre;

            const btnQuitar = document.createElement('button');
            btnQuitar.type = 'button';
            btnQuitar.className = 'btn btn-sm btn-outline-danger';
            btnQuitar.textContent = 'Quitar';
            btnQuitar.onclick = () => {
                alumnosSeleccionados.splice(index, 1);
                renderLista();
            };

            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'alumnos[]';
            hiddenInput.value = alumno.id;

            const leftDiv = document.createElement('div');
            leftDiv.className = 'd-flex align-items-center gap-2';
            leftDiv.appendChild(label);

            item.appendChild(leftDiv);
            item.appendChild(btnQuitar);
            item.appendChild(hiddenInput);
            lista.appendChild(item);
        });

        if (alumnosSeleccionados.length > 0) {
            const btnLimpiar = document.createElement('button');
            btnLimpiar.type = 'button';
            btnLimpiar.className = 'btn btn-warning mt-3';
            btnLimpiar.textContent = 'Limpiar lista';
            btnLimpiar.onclick = () => {
                Swal.fire({
                    title: '¿Estás seguro?',
                    text: 'Esto eliminará todos los alumnos seleccionados de la lista.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Sí, limpiar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        alumnosSeleccionados = [];
                        renderLista();
                        Swal.fire({
                            icon: 'success',
                            title: 'Lista limpia',
                            text: 'Todos los alumnos fueron eliminados de la lista.',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    }
                });
            };
            lista.appendChild(btnLimpiar);
        }
    }
    btnAgregar.addEventListener('click', () => {
        const selectedOption = selectAlumno.options[selectAlumno.selectedIndex];
        console.log("Selected option:", selectedOption);
        if (!selectedOption || selectedOption.value === "") {
            Swal.fire('Atención', 'Debes seleccionar un alumno válido.', 'warning');
            return;
        }
        const id = parseInt(selectedOption.value);
        const nombre = selectedOption.text;
        if (isNaN(id)) {
            Swal.fire('Error', 'ID del alumno no válido.', 'error');
            return;
        }
        if (alumnosSeleccionados.some(a => a.id === id)) {
            Swal.fire('Atención', 'Este alumno ya fue agregado.', 'info');
            return;
        }
        alumnosSeleccionados.push({
            id,
            nombre
        });
        renderLista();
    });

    function quitarAlumno(grupoId, alumnoId, btn) {
        Swal.fire({
            title: '¿Estás seguro?',
            text: 'Este alumno será desasignado del grupo.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Sí, quitar',
            cancelButtonText: 'Cancelar'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/grupos/${grupoId}/desasignar-alumno/${alumnoId}`, {
                        method: 'DELETE',
                        headers: {
                            'X-CSRF-TOKEN': '{{ csrf_token() }}',
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) throw new Error('No se pudo desasignar');
                        return response.json();
                    })
                    .then(() => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Desasignado',
                            text: 'El alumno fue desasignado correctamente.',
                            timer: 1500,
                            showConfirmButton: false
                        });
                        const li = btn.closest('li');
                        li.remove();
                    })
                    .catch(() => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Ocurrió un error al desasignar el alumno.'
                        });
                    });
            }
        });
    }
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.list-group-item').forEach(item => {
            const checkbox = item.querySelector('input[type="checkbox"]');
            if (checkbox.checked) {
                item.classList.add('active');
            }
            checkbox.addEventListener('change', () => {
                if (checkbox.checked) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
            item.addEventListener('click', function(e) {
                if (
                    e.target.tagName === 'BUTTON' ||
                    e.target.tagName === 'A' ||
                    e.target.closest('button') ||
                    e.target.closest('a') ||
                    e.target.tagName === 'INPUT'
                ) {
                    return;
                }
                checkbox.checked = !checkbox.checked;
                checkbox.dispatchEvent(new Event('change'));
            });
        });
        const quitarSeleccionadosBtn = document.getElementById('quitar-seleccionados');
        const form = quitarSeleccionadosBtn.closest('form');

        quitarSeleccionadosBtn.addEventListener('click', function(e) {
            e.preventDefault();

            const checkboxes = form.querySelectorAll('input[name="alumnos[]"]:checked');
            if (checkboxes.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Sin selección',
                    text: 'Por favor selecciona al menos un alumno.',
                });
                return;
            }

            Swal.fire({
                title: '¿Estás seguro?',
                text: 'Los alumnos seleccionados serán desasignados del grupo.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Sí, quitar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    const formData = new FormData();
                    formData.append('_token', '{{ csrf_token() }}');
                    formData.append('_method', 'DELETE');

                    checkboxes.forEach(checkbox => {
                        formData.append('alumnos[]', checkbox.value);
                    });

                    fetch(form.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Accept': 'application/json'
                            }
                        })
                        .then(response => {
                            if (!response.ok) throw new Error('Error al desasignar');
                            return response.json();
                        })
                        .then(data => {
                            Swal.fire({
                                icon: 'success',
                                title: 'Desasignados',
                                text: 'Los alumnos fueron desasignados correctamente.',
                                timer: 1500,
                                showConfirmButton: false
                            });

                            checkboxes.forEach(checkbox => {
                                const li = checkbox.closest('li');
                                if (li) li.remove();
                            });
                        })
                        .catch(() => {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Ocurrió un error al desasignar los alumnos.'
                            });
                        });
                }
            });
        });
    });
</script>

<style>
    .btn-dots {
        pointer-events: none;
        cursor: default;
        opacity: 0.6;
    }

    #grupo-nav {
        transition: transform 0.4s ease-in-out;
    }

    .btn-dots {
        pointer-events: none;
        cursor: default;
        opacity: 0.6;
    }

    #grupo-nav::-webkit-scrollbar {
        display: none;
    }

    .list-group-item {
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .list-group-item:hover {
        background-color: #f0f8ff;
    }

    .list-group-item.active {
        background-color: #cce5ff;
        color: #004085;
        font-weight: 600;
    }
</style>
@endsection